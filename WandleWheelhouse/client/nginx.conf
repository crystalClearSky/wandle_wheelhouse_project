# Location: client/nginx.conf

# User and worker processes (usually fine as default for a simple setup)
user nginx;
# worker_processes auto; # 'auto' is a good default for modern Nginx
# For Raspberry Pi (limited cores), explicitly setting to 1 can sometimes be beneficial
# if CPU is a major bottleneck, but 'auto' is generally fine to start.
worker_processes 1; # Changed to 1 for typical Pi resources, can be 'auto'
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024; # Default is usually fine
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on; # Often enabled with sendfile

    keepalive_timeout  65;

    #gzip  on; # Consider enabling gzip for better performance
    #gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;


    # Define the server block to handle requests for your React SPA and API proxy
    server {
        listen 80; # Nginx listens on port 80 inside the container
        server_name localhost; # This is internal to Docker, actual domain handled by NPM

        # Root directory for your React app's static files
        # This path matches where Dockerfile copies the 'dist' folder
        root   /usr/share/nginx/html;
        index  index.html index.htm;

        # --- API Proxy Block ---
        # Requests to /api/... will be forwarded to your backend API service
        location /api/ {
            # 'api' is the service name of your backend container in docker-compose.yml
            # The backend API (Kestrel) is listening on port 80 inside its container
            # (as per ASPNETCORE_URLS=http://+:80 in your .env file on the Pi)
            proxy_pass http://api:80; # <-- CORRECTED PORT

            # Standard proxy headers to pass necessary information to the backend
            proxy_set_header Host $host; # Preserves the original host requested by the client
            proxy_set_header X-Real-IP $remote_addr; # Passes the real IP of the client
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # List of IPs traffic has passed through
            proxy_set_header X-Forwarded-Proto $scheme; # Informs backend if original request was http or https

            # Settings for potential WebSocket connections (good to have, though not used yet)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Optional: Increase timeouts if your API can sometimes be slow to respond
            proxy_connect_timeout 60s;
            proxy_send_timeout    60s;
            proxy_read_timeout    60s; # Default is often 60s, 90s if you had issues
        }
        # --- End API Proxy Block ---

        # --- Serve Static Files and Handle SPA Routing ---
        # This handles requests for your React app's assets and ensures client-side routing works
        location / {
            try_files $uri $uri/ /index.html;
            # This means:
            # 1. Try to serve the exact file ($uri)
            # 2. If not found, try to serve it as a directory ($uri/) by looking for an index file
            # 3. If still not found, fall back to serving /index.html (main page of your React app)
            #    This allows React Router to handle the routing on the client-side.
        }

        # Optional: Add caching headers for static assets to improve performance
        # These are typically your built JS, CSS, images from the /assets folder of your React app
        location ~* \.(?:css|js|jpg|jpeg|png|gif|ico|svg|webp|woff|woff2|ttf|eot)$ {
            expires 1y; # Cache these for 1 year
            add_header Cache-Control "public";
            # access_log off; # Optional: turn off access logging for static assets
        }

        # Optional: Deny access to hidden files (e.g., .htaccess, .git)
        location ~ /\. {
            deny all;
        }
    }
}